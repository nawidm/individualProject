package com.example.demo.Database;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.CrossOrigin;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class DBController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@CrossOrigin(origins = "http://localhost:3000")
	@RequestMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String firstname
			, @RequestParam String surname, @RequestParam String accNumber) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setFirstName(firstname);
		n.setSurName(surname);
		n.setAccNumber(accNumber);
		userRepository.save(n);
		return "Saved";
	}

	@CrossOrigin(origins = "http://localhost:3000")
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@CrossOrigin(origins = "http://localhost:3000")
	@RequestMapping(path="/remove")
	public @ResponseBody String removeUser (@RequestParam Long idRemove) {
		
		userRepository.deleteById(idRemove);
		return "removed";
	}
	
	@CrossOrigin(origins = "http://localhost:3000")
	@RequestMapping(path="/edit")
	public @ResponseBody String editUser (@RequestParam Long idEdit, @RequestParam String firstname,
				@RequestParam String surname, @RequestParam String accNumber) {
		
		User n = userRepository.findById(idEdit).get();
		n.setId(idEdit);
		n.setFirstName(firstname);
		n.setSurName(surname);
		n.setAccNumber(accNumber);
		userRepository.deleteById(idEdit);
		userRepository.save(n);
		return "Edited";
	}
}
